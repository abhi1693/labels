name: build
on:
  push:
    branches:
      - "**"
    paths-ignore:
      - ".gitignore"
      - ".envrc"
      - "README.md"
      - "CONTRIBUTING.md"
      - ".github/workflows/labels.yml"
      - ".github/labels.toml"
      - ".github/**/*.md"
    tags-ignore:
      - "v*"
  pull_request:
jobs:
  # lint everything
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        linter: [fmt-lint, flake8, mypy]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install Poetry
        run: |
          curl -sSLO https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          python3 get-poetry.py --version 1.0.3
          echo "::add-path::$HOME/.poetry/bin"
          rm -f get-poetry.py
      - name: Install dependencies
        run: |
          echo ${PATH}
          which poetry
          poetry install -v --no-dev
          if [[ $LINTER == fmt-* ]]; then
            pip install black isort[pyproject] pytest responses
          else
            pip install "$LINTER"
          fi
        env:
          LINTER: ${{ matrix.linter }}
      - name: Lint
        run: poetry run make ${{ matrix.linter }}

  # Test on all platforms
  test:
    needs: lint
    strategy:
      matrix:
        # os: [macos-latest, windows-latest, ubuntu-latest]
        os: [ubuntu-latest]
        pythonVersion: [3.6, 3.7, 3.8, 3.9]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.pythonVersion }}
      - name: Install Poetry
        run: |
          curl -sSLO https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
          python3 get-poetry.py --version 1.0.3
          echo "::add-path::$HOME/.poetry/bin"
      - name: Install Dependencies
        run: |
          echo ${PATH}
          which poetry
          poetry install -v
      - name: Test
        run: poetry run make test

      - name: Build
        run: make dist

  # Build docker images
  docker:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Docker Lint
        run: make docker-lint

      - name: Install pytoml
        run: pip3 install pytoml --user

      - name: Download BuildX
        run: |
          curl -sSfL https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64 -o buildx
          mkdir -p ${HOME}/.docker/cli-plugins
          cp buildx ${HOME}/.docker/cli-plugins/docker-buildx
          chmod a+x ${HOME}/.docker/cli-plugins/docker-buildx

      - name: Install
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y -qq qemu-user
          sudo docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64

      - name: Info
        run: |
          cat /proc/sys/fs/binfmt_misc/qemu-aarch64
          docker info
          docker buildx version

      - name: Create Builder
        run: |
          docker buildx create --name actions
          docker buildx use actions
          docker buildx inspect --bootstrap

      - name: Docker Login to Registry (DockerHub)
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: asaharan3
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name	== 'push'

      - name: Docker Build [With Push]
        run: |
          make debug-docker-vars
          make docker
          make docker-inspect
        env:
          BUILDX_PUSH: 1
          BUILDX_ENABLE: 1
        if: github.event_name == 'push'

      # No Push
      - name: Docker Build [Skip Push]
        run: |
          make debug-docker-vars
          make docker
        env:
          BUILDX_PUSH: 0
          BUILDX_ENABLE: 1
        if: github.event_name == 'pull_request'

      - name: Docker Cleanup
        run: |
          docker logout || true
          rm -f ${HOME}/.docker/config.json
        if: github.event_name	== 'push'
